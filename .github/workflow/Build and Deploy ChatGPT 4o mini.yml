name: Build and Deploy ChatGPT 4o mini

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  setup:
    name: Set up Python Environment
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Cache Dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

  build:
    name: Build the Model
    runs-on: ubuntu-latest
    needs: setup

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Cache Dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Build Model
      run: |
        python build_model.py  # Replace with actual build script

  test:
    name: Run Unit Tests and Linting
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10']  # Test on multiple Python versions

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Cache Dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run Linter
      run: |
        flake8 .  # Replace with your linter if different

    - name: Run Unit Tests
      run: |
        pytest tests/  # Replace with actual test command

    - name: Run Integration Tests
      run: |
        pytest integration_tests/  # Replace with actual integration test command

  deploy:
    name: Deploy Model to Production
    runs-on: ubuntu-latest
    needs: test
    environment: production

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Set up SSH for Deployment
      uses: webfactory/ssh-agent@v0.6.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Deploy to Server
      run: |
        ssh -o StrictHostKeyChecking=no user@your_server 'bash -s' < deploy_script.sh
      env:
        DEPLOY_ENV: production
        API_KEY: ${{ secrets.git4omini }}  # Use git4omini API token for deployment

    - name: Verify Deployment
      run: |
        curl -X GET https://your-api-endpoint/health-check -H "Authorization: Bearer ${{ secrets.git4omini }}"
      env:
        API_KEY: ${{ secrets.git4omini }}

    - name: Rollback on Failure
      if: failure()
      run: |
        ssh -o StrictHostKeyChecking=no user@your_server 'bash -s' < rollback_script.sh
      env:
        DEPLOY_ENV: production
        API_KEY: ${{ secrets.git4omini }}

  notify:
    name: Notify on Slack
    runs-on: ubuntu-latest
    needs: deploy
    if: always()

    steps:
    - name: Send Notification
      uses: slackapi/slack-github-action@v1.23.0
      with:
        channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
        slack-message: "Deployment of ChatGPT 4o mini has been completed."
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
